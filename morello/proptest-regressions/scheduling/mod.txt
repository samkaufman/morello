# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 36884ecc19b4e544027bd2c09e9f97ad40ddac281ceb7a9265345b9d2c08a5a6 # shrinks to spec = Spec(Compose { components: [PrimitiveBasics { typ: Move, spec_shape: [7, 1, 8], dtypes: [Sint32, Bfloat16] }, PrimitiveBasics { typ: Move, spec_shape: [7, 1, 8], dtypes: [Sint32, Sint32] }, PrimitiveBasics { typ: Max { dim: 1, accum: false }, spec_shape: [7, 1, 8], dtypes: [Float32, Sint32] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: VRF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: Some(8) }], serial_only: false }, Standard(MemVec([2, 11, 0, 0])))
cc 94265c1e10ef674c8c0139c387698328bf819d463d88bf503c157b0b88ff4f7d # shrinks to spec = Spec(Compose { components: [PrimitiveBasics { typ: Matmul { accum: false }, spec_shape: [1, 7, 2], dtypes: [Uint8, Uint8, Float32] }, PrimitiveBasics { typ: Matmul { accum: false }, spec_shape: [1, 4, 7], dtypes: [Bfloat16, Sint8, Uint8] }, PrimitiveBasics { typ: SoftmaxDenominator { scan_dim: 0, accum: false }, spec_shape: [2, 4], dtypes: [Bfloat16, Uint8, Bfloat16] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: GL, layout: Layout([(0, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 1, aligned: false, level: RF, layout: Layout([(1, Dynamic), (0, Dynamic), (1, Packed(2))]), vector_size: None }, TensorSpecAux { contig: 2, aligned: true, level: L1, layout: Layout([(1, Dynamic), (0, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 2, aligned: true, level: VRF, layout: Layout([(0, Dynamic), (1, Dynamic)]), vector_size: Some(8) }], serial_only: true }, Standard(MemVec([4, 7, 10, 11])))
