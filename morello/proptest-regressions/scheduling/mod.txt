# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 36884ecc19b4e544027bd2c09e9f97ad40ddac281ceb7a9265345b9d2c08a5a6 # shrinks to spec = Spec(Compose { components: [PrimitiveBasics { typ: Move, spec_shape: [7, 1, 8], dtypes: [Sint32, Bfloat16] }, PrimitiveBasics { typ: Move, spec_shape: [7, 1, 8], dtypes: [Sint32, Sint32] }, PrimitiveBasics { typ: Max { dim: 1, accum: false }, spec_shape: [7, 1, 8], dtypes: [Float32, Sint32] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: VRF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: Some(8) }], serial_only: false }, Standard(MemVec([2, 11, 0, 0])))
cc f3a9623b6ae4cc98fa1cebc607329abfaae9cdca2b15cf04a9188a9af929c829 # shrinks to spec = Spec(Primitive(PrimitiveBasics { typ: SoftmaxDenominatorAndUnscaled { scan_dim: 2, accum: false }, spec_shape: [1, 1, 4, 1], dtypes: [Bfloat16, Sint32, Uint16] }, [TensorSpecAux { aligned: false, level: L1, layout: Layout { dims: [(0, Dynamic), (2, Dynamic), (1, Dynamic), (3, Dynamic), (2, Packed(2))], contig: 5 }, vector_size: None }, TensorSpecAux { aligned: true, level: RF, layout: Layout { dims: [(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)], contig: 4 }, vector_size: None }, TensorSpecAux { aligned: false, level: RF, layout: Layout { dims: [(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)], contig: 4 }, vector_size: None }], false), Standard(MemVec([3, 2, 14, 0])))
cc 64f39f2aa65acb6e7de93c873a59b6f2bc153ad281fc01dac8c137bb401025e9 # shrinks to spec = Spec(Primitive(PrimitiveBasics { typ: DivideVecScalar { scan_dim: 2 }, spec_shape: [1, 5, 5, 6], dtypes: [Uint16, Float32, Sint32] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([8, 8, 256*, 0*])))
