# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 76c0c2d33aa01d14c3056f9b9b8d50e9bbebdaef92f6e2913d21c51e03f047f7 # shrinks to spec = Spec(Compose { components: [PrimitiveBasics { typ: Matmul { accum: true }, spec_shape: [3, 4, 5], dtypes: [Uint16, Uint8, Sint32] }, PrimitiveBasics { typ: Softmax { scan_dim: 0 }, spec_shape: [3, 4], dtypes: [Uint16, Uint16] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: VRF, layout: Layout([(0, Dynamic), (1, Dynamic)]), vector_size: Some(16) }, TensorSpecAux { contig: 1, aligned: false, level: VRF, layout: Layout([(1, Dynamic), (0, Dynamic), (1, Packed(2))]), vector_size: Some(16) }, TensorSpecAux { contig: 2, aligned: false, level: VRF, layout: Layout([(1, Dynamic), (0, Dynamic)]), vector_size: Some(8) }], serial_only: true }, Standard(MemVec([0, 11, 0, 0])))
cc ab4f896832919f80afb9f536fa2f2eed96228ab3c3ae0be8d636cdb57412cbaf # shrinks to spec = Spec(Compose { components: [PrimitiveBasics { typ: Move, spec_shape: [1, 5, 3], dtypes: [Uint16, Sint16] }, PrimitiveBasics { typ: Move, spec_shape: [1, 5, 3], dtypes: [Uint32, Uint16] }, PrimitiveBasics { typ: SoftmaxComplete { scan_dim: 1 }, spec_shape: [1, 5, 3], dtypes: [Uint32, Uint32, Uint32, Uint32] }], operand_auxes: [TensorSpecAux { contig: 1, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: GL, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 1, aligned: true, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], serial_only: false }, Standard(MemVec([6, 4, 15, 19])))
cc a319ba38bb07d1ad4121002a2d148676ac914281e0c1310eb208f1dd75d96904 # shrinks to spec = Spec(Primitive(PrimitiveBasics { typ: Conv { accum: true }, spec_shape: [1, 2, 1, 2, 7, 2, 6], dtypes: [Uint8, Uint8, Sint16] }, [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: VRF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: Some(16) }, TensorSpecAux { contig: 4, aligned: true, level: VRF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: Some(16) }], true), Standard(MemVec([0, 1, 0, 0])))
