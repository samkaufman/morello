# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc d64730c4a8a7fc4a5cc838534008b0c930c57ba73ab7d5140677a63c94265d5f # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [8, 7, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([7, 10, 3, 0]))), actions_costs: [(11, Cost { main: 9968, peaks: MemVec([7, 0, 0, 0]), depth: 9 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [2, 7, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([7, 10, 3, 0]))), actions_costs: [(1, Cost { main: 2492, peaks: MemVec([7, 0, 0, 0]), depth: 8 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [2, 7, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 0, 0]))), actions_costs: [(1, Cost { main: 140, peaks: MemVec([4, 0, 0, 0]), depth: 7 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 7, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 0, 0]))), actions_costs: [(2, Cost { main: 70, peaks: MemVec([4, 0, 0, 0]), depth: 6 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 0, 0]))), actions_costs: [(0, Cost { main: 10, peaks: MemVec([4, 0, 0, 0]), depth: 5 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 10, 0, 0]))), actions_costs: [(3, Cost { main: 6, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 10, 0, 0]))), actions_costs: [(0, Cost { main: 3, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 10, 0, 0]))), actions_costs: [(4, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 10, 0, 0]))), actions_costs: [(1, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 10, 0, 0]))), actions_costs: [(1, Cost { main: 4, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(4, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(4, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [2, 7, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 3, 0]))), actions_costs: [(5, Cost { main: 1232, peaks: MemVec([4, 0, 0, 0]), depth: 6 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 7, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 3, 0]))), actions_costs: [(6, Cost { main: 616, peaks: MemVec([4, 0, 0, 0]), depth: 5 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 3, 0]))), actions_costs: [(0, Cost { main: 88, peaks: MemVec([4, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 10, 0, 0]))), actions_costs: [(0, Cost { main: 4, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(4, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(4, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 10, 3, 0]))), actions_costs: [(2, Cost { main: 84, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(4, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 3, 0]))), actions_costs: [(7, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 3, 0]))), actions_costs: [(8, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }] }] }] }] }
cc 68d1eb184fc9c0a633d0b48fac7adbaeb0ec1e1af3aa4e0eb7b124fc8815d133 # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 6, 8, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([6, 1, 11, 0]))), actions_costs: [(25, Cost { main: 18000, peaks: MemVec([6, 0, 0, 0]), depth: 9 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 2, 8, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([6, 1, 11, 0]))), actions_costs: [(17, Cost { main: 6000, peaks: MemVec([6, 0, 0, 0]), depth: 8 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 8, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([6, 1, 11, 0]))), actions_costs: [(18, Cost { main: 3000, peaks: MemVec([6, 0, 0, 0]), depth: 7 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([6, 1, 11, 0]))), actions_costs: [(1, Cost { main: 375, peaks: MemVec([6, 0, 0, 0]), depth: 6 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([5, 1, 0, 0]))), actions_costs: [(1, Cost { main: 35, peaks: MemVec([5, 0, 0, 0]), depth: 5 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(5, Cost { main: 15, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1, 1], dtypes: [Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(0, Cost { main: 3, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1, 1], dtypes: [Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(1, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 5], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(7, Cost { main: 20, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(0, Cost { main: 4, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(0, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(1, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 5], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([5, 1, 11, 0]))), actions_costs: [(1, Cost { main: 140, peaks: MemVec([5, 0, 0, 0]), depth: 5 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 5], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(7, Cost { main: 20, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(0, Cost { main: 4, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(0, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(1, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 5], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 11, 0]))), actions_costs: [(13, Cost { main: 120, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 11, 0]))), actions_costs: [(0, Cost { main: 24, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(0, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 11, 0]))), actions_costs: [(2, Cost { main: 22, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 11, 0]))), actions_costs: [(9, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }] }] }] }] }] }
cc ffa548f7132c720e05ef2fff2ac3c25104df164c8af6ca2688afe5fccc1ffc05 # shrinks to decision = Decision { spec: Spec(Compose { components: [PrimitiveBasics { typ: Move, spec_shape: [3, 5], dtypes: [Bfloat16, Sint32] }, PrimitiveBasics { typ: Matmul { accum: false }, spec_shape: [3, 8, 5], dtypes: [Uint8, Uint16, Bfloat16] }, PrimitiveBasics { typ: Matmul { accum: false }, spec_shape: [3, 4, 8], dtypes: [Bfloat16, Uint16, Uint8] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: GL, layout: Layout([(0, Dynamic), (1, Dynamic), (0, Packed(2))]), vector_size: None }, TensorSpecAux { contig: 2, aligned: true, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic)]), vector_size: None }], serial_only: false }, Standard(MemVec([6, 0, 8, 4]))), actions_costs: [], .. }
cc c304c10b92008a008dcf8c7f6cee156b4bc4b803dbc1ab94b6e2136bb393e3d8 # shrinks to decision = Decision { spec: Spec(Compose { components: [PrimitiveBasics { typ: Move, spec_shape: [7], dtypes: [Sint8, Uint8] }, PrimitiveBasics { typ: Move, spec_shape: [7], dtypes: [Sint32, Sint8] }, PrimitiveBasics { typ: Move, spec_shape: [7], dtypes: [Sint32, Sint32] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: VRF, layout: Layout([(0, Dynamic)]), vector_size: Some(8) }, TensorSpecAux { contig: 0, aligned: true, level: VRF, layout: Layout([(0, Dynamic)]), vector_size: Some(32) }], serial_only: false }, Standard(MemVec([6, 7, 0, 0]))), actions_costs: [], .. }
cc f5b191c1f4f1dbd90730f08613109b621f864927c42299e1b542bbf97b64c4d2 # shrinks to decision = Decision { spec: Spec(Compose { components: [PrimitiveBasics { typ: Conv { accum: true }, spec_shape: [1, 1, 1, 3, 2, 2, 2], dtypes: [Uint8, Uint32, Sint16] }, PrimitiveBasics { typ: Conv { accum: true }, spec_shape: [1, 1, 4, 4, 8, 2, 7], dtypes: [Sint8, Sint32, Uint8] }, PrimitiveBasics { typ: Move, spec_shape: [1, 4, 4, 8], dtypes: [Uint32, Sint8] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: VRF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: Some(16) }, TensorSpecAux { contig: 4, aligned: true, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (3, Dynamic), (2, Dynamic)]), vector_size: None }], serial_only: true }, Standard(MemVec([0, 8, 0, 0]))), actions_costs: [], .. }
cc 0c34a0ab248a60c3110a810fee1fe228ea0a0b8b6423ac4fb691a9259949ebd4 # shrinks to decision = Decision { spec: Spec(Compose { components: [PrimitiveBasics { typ: Conv { accum: false }, spec_shape: [6, 2, 6, 1, 1, 1, 1], dtypes: [Sint8, Sint32, Uint16] }, PrimitiveBasics { typ: Conv { accum: false }, spec_shape: [6, 6, 3, 1, 1, 1, 1], dtypes: [Sint32, Sint32, Sint8] }, PrimitiveBasics { typ: Conv { accum: true }, spec_shape: [6, 3, 6, 1, 5, 1, 5], dtypes: [Float32, Uint32, Sint32] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic), (0, Packed(2))]), vector_size: None }, TensorSpecAux { contig: 5, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic), (1, Packed(2))]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic), (1, Packed(2))]), vector_size: None }, TensorSpecAux { contig: 5, aligned: true, level: GL, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic), (0, Packed(2))]), vector_size: None }], serial_only: false }, Standard(MemVec([5, 3, 6, 0]))), actions_costs: [], .. }
cc 54ec52daf4c8efe640a9f90d82171c9a5af142011ed33921d5038b1a12ba5e77 # shrinks to decision = Decision { spec: Spec(Compose { components: [PrimitiveBasics { typ: Conv { accum: false }, spec_shape: [6, 2, 2, 1, 1, 1, 1], dtypes: [Uint8, Float32, Float32] }, PrimitiveBasics { typ: Conv { accum: true }, spec_shape: [6, 2, 4, 1, 1, 1, 1], dtypes: [Sint32, Uint8, Uint8] }, PrimitiveBasics { typ: Conv { accum: true }, spec_shape: [6, 4, 8, 5, 1, 5, 1], dtypes: [Uint8, Float32, Sint32] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: VRF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic), (1, Packed(2))]), vector_size: Some(4) }, TensorSpecAux { contig: 4, aligned: false, level: VRF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic), (0, Packed(2))]), vector_size: Some(8) }, TensorSpecAux { contig: 3, aligned: true, level: L1, layout: Layout([(0, Dynamic), (2, Dynamic), (1, Dynamic), (3, Dynamic), (1, OddEven(8))]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic), (0, Packed(2))]), vector_size: None }], serial_only: true }, Standard(MemVec([4, 9, 6, 0]))), actions_costs: [], .. }
cc 80a80d0b7bcc0210fdac8c0efce8d96d05389d567ba8c1b8fcc40313b9b0835c # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: OnePrefix, spec_shape: [2, 2], dtypes: [Float32, Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 1, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], false), Standard(MemVec([0, 6, 1, 0]))), actions_costs: [], .. }
cc e5bf876af780fbd1df3ff31405c72aad7791d6451be38a86f3915cf8eff21537 # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: OnePrefix, spec_shape: [1], dtypes: [Uint8, Sint16] }, [TensorSpecAux { contig: 1, aligned: false, level: L1, layout: Layout([(0, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 2, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic)]), vector_size: None }], true), Standard(MemVec([5, 5, 5, 0]))), actions_costs: [], .. }
cc 8584f34c47b8284339fe5788b7f91b6dcff15f04ef89d3781b8982936e11934a # shrinks to decision = Decision { spec: Spec(Compose { components: [PrimitiveBasics { typ: Conv { accum: false }, spec_shape: [8, 1, 1, 1, 2, 1, 2], dtypes: [Sint8, Uint32, Sint8] }, PrimitiveBasics { typ: Conv { accum: false }, spec_shape: [8, 1, 2, 1, 2, 1, 1], dtypes: [Sint16, Bfloat16, Sint8] }, PrimitiveBasics { typ: Conv { accum: false }, spec_shape: [8, 2, 2, 5, 2, 5, 1], dtypes: [Sint8, Uint16, Sint16] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 2, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 2, aligned: true, level: GL, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: true, level: VRF, layout: Layout([(1, Dynamic), (2, Dynamic), (3, Dynamic), (0, Dynamic)]), vector_size: Some(8) }], serial_only: true }, Standard(MemVec([3, 3, 9, 3]))), actions_costs: [], .. }
cc a6852a12817ce04a0372eb686dafc9859ff7f42cb074f23959201995aa609092 # shrinks to decision = Decision { spec: Spec(Compose { components: [PrimitiveBasics { typ: Conv { accum: false }, spec_shape: [3, 2, 7, 1, 2, 1, 2], dtypes: [Bfloat16, Bfloat16, Uint16] }, PrimitiveBasics { typ: Conv { accum: false }, spec_shape: [3, 7, 3, 1, 3, 1, 2], dtypes: [Uint16, Sint8, Bfloat16] }, PrimitiveBasics { typ: Conv { accum: false }, spec_shape: [3, 3, 4, 1, 3, 1, 1], dtypes: [Uint8, Sint8, Uint16] }], operand_auxes: [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic), (1, Packed(2))]), vector_size: None }, TensorSpecAux { contig: 0, aligned: true, level: GL, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic), (1, Packed(2))]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: L1, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }], serial_only: true }, Standard(MemVec([5, 4, 8, 4]))), actions_costs: [], .. }
cc 39cd4bd5b0eb79bcfcf469b947da0c729af8ccfbc6e4ce1b975f9d7f932bb4a6 # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: OnePrefix, spec_shape: [2, 2, 1, 2], dtypes: [Uint16, Uint32] }, [TensorSpecAux { contig: 0, aligned: false, level: GL, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 5, aligned: true, level: RF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (4, Dynamic), (1, Dynamic)]), vector_size: None }], false), Standard(MemVec([130, 128, 129, 135]))), actions_costs: [(0, Cost { main: 0, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], .. }
cc d471a0777531429bbb78ca78639c409de476018b98b25e7910f233c02897ebcb # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Fill { value: Zero }, spec_shape: [1], dtypes: [Uint8] }, [TensorSpecAux { contig: 1, aligned: false, level: L1, layout: Layout([(0, Dynamic)]), vector_size: None }], false), Standard(MemVec([131, 130, 135, 0]))), actions_costs: [(1, Cost { main: 34, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], .. }
cc e9057d13010229f4468ecac109e0b3076aa1eb4230db4ec679169453e5f52045 # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Fill { value: Zero }, spec_shape: [1], dtypes: [Uint8] }, [TensorSpecAux { contig: 1, aligned: false, level: L1, layout: Layout([(0, Dynamic)]), vector_size: None }], false), Standard(MemVec([133, 132, 6, 0]))), actions_costs: [(1, Cost { main: 45, peaks: MemVec([4, 0, 0, 0]), depth: 5 })], .. }
cc 371da01ee03b117143da89fc2781c8f2fe7157e17d312f6726178a376f71c377 # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Fill { value: Zero }, spec_shape: [1], dtypes: [Uint8] }, [TensorSpecAux { contig: 1, aligned: false, level: L1, layout: Layout([(0, Dynamic)]), vector_size: None }], false), Standard(MemVec([135, 144, 3, 0]))), actions_costs: [(1, Cost { main: 45, peaks: MemVec([4, 0, 0, 0]), depth: 5 })], .. }
cc c0dc12f60f5f89b92fc5a164912bc145f33d9f21ef6a73416a663d30a3eb5a44 # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: DivideVecScalar { scan_dim: 3 }, spec_shape: [2, 1, 2, 2, 2], dtypes: [Uint8, Uint32, Sint8] }, [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic), (4, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic), (4, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: GL, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic), (4, Dynamic)]), vector_size: None }], true), Standard(MemVec([128, 128, 5, 7]))), actions_costs: [], .. }
cc fce49b7600bb44a96bd662cb15b3eb19716fb0a97285f62ae19182c5079d279f # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Fill { value: Zero }, spec_shape: [1], dtypes: [Uint16] }, [TensorSpecAux { contig: 1, aligned: false, level: RF, layout: Layout([(0, Dynamic)]), vector_size: None }], false), Standard(MemVec([4, 14, 0*, 0*]))), actions_costs: [(0, Cost { main: 5, peaks: MemVec([8, 0, 0*, 0*]), depth: 5 })], .. }
cc 46f2c566b0092a4a19aa0adfe622d510e551d0d83283e273aee20d71a300fc7d # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Fill { value: Zero }, spec_shape: [2], dtypes: [Uint8] }, [TensorSpecAux { contig: 0, aligned: false, level: RF, layout: Layout([(0, Dynamic)]), vector_size: None }], true), Standard(MemVec([7, 8, 0, 0]))), actions_costs: [(0, Cost { main: 74, peaks: MemVec([7, 0, 0, 0]), depth: 9 })], .. }
