# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc d64730c4a8a7fc4a5cc838534008b0c930c57ba73ab7d5140677a63c94265d5f # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [8, 7, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([7, 10, 3, 0]))), actions_costs: [(11, Cost { main: 9968, peaks: MemVec([7, 0, 0, 0]), depth: 9 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [2, 7, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([7, 10, 3, 0]))), actions_costs: [(1, Cost { main: 2492, peaks: MemVec([7, 0, 0, 0]), depth: 8 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [2, 7, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 0, 0]))), actions_costs: [(1, Cost { main: 140, peaks: MemVec([4, 0, 0, 0]), depth: 7 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 7, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 0, 0]))), actions_costs: [(2, Cost { main: 70, peaks: MemVec([4, 0, 0, 0]), depth: 6 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 0, 0]))), actions_costs: [(0, Cost { main: 10, peaks: MemVec([4, 0, 0, 0]), depth: 5 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 2], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 10, 0, 0]))), actions_costs: [(3, Cost { main: 6, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 10, 0, 0]))), actions_costs: [(0, Cost { main: 3, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1], dtypes: [Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 10, 0, 0]))), actions_costs: [(4, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 10, 0, 0]))), actions_costs: [(1, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 10, 0, 0]))), actions_costs: [(1, Cost { main: 4, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(4, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(4, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [2, 7, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 3, 0]))), actions_costs: [(5, Cost { main: 1232, peaks: MemVec([4, 0, 0, 0]), depth: 6 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 7, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 3, 0]))), actions_costs: [(6, Cost { main: 616, peaks: MemVec([4, 0, 0, 0]), depth: 5 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([4, 10, 3, 0]))), actions_costs: [(0, Cost { main: 88, peaks: MemVec([4, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 10, 0, 0]))), actions_costs: [(0, Cost { main: 4, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(4, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(4, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 10, 3, 0]))), actions_costs: [(2, Cost { main: 84, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(4, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 2], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 3, 0]))), actions_costs: [(7, Cost { main: 2, peaks: MemVec([0, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 3, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 3, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 10, 3, 0]))), actions_costs: [(8, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }] }] }] }] }
cc 68d1eb184fc9c0a633d0b48fac7adbaeb0ec1e1af3aa4e0eb7b124fc8815d133 # shrinks to decision = Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 6, 8, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([6, 1, 11, 0]))), actions_costs: [(25, Cost { main: 18000, peaks: MemVec([6, 0, 0, 0]), depth: 9 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 2, 8, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([6, 1, 11, 0]))), actions_costs: [(17, Cost { main: 6000, peaks: MemVec([6, 0, 0, 0]), depth: 8 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 8, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([6, 1, 11, 0]))), actions_costs: [(18, Cost { main: 3000, peaks: MemVec([6, 0, 0, 0]), depth: 7 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([6, 1, 11, 0]))), actions_costs: [(1, Cost { main: 375, peaks: MemVec([6, 0, 0, 0]), depth: 6 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([5, 1, 0, 0]))), actions_costs: [(1, Cost { main: 35, peaks: MemVec([5, 0, 0, 0]), depth: 5 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1, 5], dtypes: [Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(5, Cost { main: 15, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1, 1], dtypes: [Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(0, Cost { main: 3, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Zero, spec_shape: [1, 1, 1, 1], dtypes: [Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(5, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(1, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 5], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(7, Cost { main: 20, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(0, Cost { main: 4, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(0, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(1, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 5], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([5, 1, 11, 0]))), actions_costs: [(1, Cost { main: 140, peaks: MemVec([5, 0, 0, 0]), depth: 5 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 5], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(7, Cost { main: 20, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 0, 0]))), actions_costs: [(0, Cost { main: 4, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(0, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(1, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 5], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (2, Dynamic), (3, Dynamic), (1, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 11, 0]))), actions_costs: [(13, Cost { main: 120, peaks: MemVec([3, 0, 0, 0]), depth: 4 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([3, 1, 11, 0]))), actions_costs: [(0, Cost { main: 24, peaks: MemVec([3, 0, 0, 0]), depth: 3 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 0, 0]))), actions_costs: [(0, Cost { main: 2, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: false, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([2, 1, 11, 0]))), actions_costs: [(2, Cost { main: 22, peaks: MemVec([2, 0, 0, 0]), depth: 2 })], children: [Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 0, 0]))), actions_costs: [(6, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }, Decision { spec: Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [1, 1, 1, 1], dtypes: [Uint16, Uint16] }, [TensorSpecAux { contig: 4, aligned: true, level: RF, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }, TensorSpecAux { contig: 4, aligned: false, level: L1, layout: Layout([(0, Dynamic), (1, Dynamic), (2, Dynamic), (3, Dynamic)]), vector_size: None }], true), Standard(MemVec([0, 1, 11, 0]))), actions_costs: [(9, Cost { main: 1, peaks: MemVec([0, 0, 0, 0]), depth: 1 })], children: [] }] }] }] }] }] }] }] }] }
